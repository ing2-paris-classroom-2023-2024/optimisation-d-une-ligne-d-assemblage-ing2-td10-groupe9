#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// définition de toutes les structures

struct Noeud {
    int sommet;
    struct Noeud* suivant;
};
// graphe
struct Graphe {
    int numSommets;
    struct Noeud** listesAdj;
};
// degre des sommets
struct DegreSommet {
    int sommet;
    int degre;
};

// creation nouveau noeud
struct Noeud* creerNoeud(int v) {
    struct Noeud* nouveauNoeud = malloc(sizeof(struct Noeud));
    nouveauNoeud->sommet = v;
    nouveauNoeud->suivant = NULL;
    return nouveauNoeud;
}

// fonction pour creer un graphe
struct Graphe* creerGraphe(int sommets) {
    struct Graphe* graphe = malloc(sizeof(struct Graphe));
    graphe->numSommets = sommets;

    graphe->listesAdj = malloc(sommets * sizeof(struct Noeud*));
    for (int i = 0; i < sommets; i++) {
        graphe->listesAdj[i] = NULL;
    }
    return graphe;
}

// fonction pour ajouter une arete au graphe
void ajouterArete(struct Graphe* graphe, int depart, int arrivee) {
    depart--; // a partir de 0
    arrivee--;

    struct Noeud* nouveauNoeudSrc = creerNoeud(arrivee);
    nouveauNoeudSrc->suivant = graphe->listesAdj[depart];
    graphe->listesAdj[depart] = nouveauNoeudSrc;

    struct Noeud* nouveauNoeudDest = creerNoeud(depart);
    nouveauNoeudDest->suivant = graphe->listesAdj[arrivee];
    graphe->listesAdj[arrivee] = nouveauNoeudDest;
}


// fonction pour calculer le degre de chaque sommet
void calculerDegres(struct Graphe* graphe, struct DegreSommet degres[]) {
    for (int i = 0; i < graphe->numSommets; i++) {
        struct Noeud* temp = graphe->listesAdj[i];
        degres[i].sommet = i;
        degres[i].degre = 0;
        while (temp) {
            degres[i].degre++;
            temp = temp->suivant;
        }
    }
}

// fonction de comparaison pour le tri
int comparerDegres(const void* a, const void* b) {
    struct DegreSommet* a1 = (struct DegreSommet*)a;
    struct DegreSommet* b1 = (struct DegreSommet*)b;
    return b1->degre - a1->degre;
}

// fonction pour colorier le graphe selon l'algorithme de Welsh-Powell
void colorierGrapheWelshPowell(struct Graphe* graphe) {
    struct DegreSommet degres[graphe->numSommets];
    calculerDegres(graphe, degres);

    qsort(degres, graphe->numSommets, sizeof(degres[0]), comparerDegres);

    int couleur[graphe->numSommets];
    bool disponible[graphe->numSommets];

    int maxCouleur = 0;

    for (int i = 0; i < graphe->numSommets; i++) {
        couleur[i] = -1;
        disponible[i] = true;
    }

    for (int i = 0; i < graphe->numSommets; i++) {
        int u = degres[i].sommet;

        struct Noeud* temp = graphe->listesAdj[u];
        while (temp) {
            if (couleur[temp->sommet] != -1) {
                disponible[couleur[temp->sommet]] = false;
            }
            temp = temp->suivant;
        }

        int cr;
        for (cr = 0; cr < graphe->numSommets; cr++) {
            if (disponible[cr]) break;
        }

        couleur[u] = cr;

        for (int j = 0; j < graphe->numSommets; j++) {
            disponible[j] = true;
        }

        if (cr > maxCouleur) {
            maxCouleur = cr;
        }
    }

    // affichage des stations
    printf("Optimisation en fonction de la contrainte d'exclusion : \n");
    printf("Nombre optimal de stations : %d\n", maxCouleur + 1);
    for (int i = 0; i <= maxCouleur; i++) {
        printf("->WS%d(", i + 1);
        for (int u = 0; u < graphe->numSommets; u++) {
            if (couleur[u] == i) {
                printf("%d, ", u + 1);
            }
        }
        printf(")\n");
    }
}

// fonction principale
int main() {
    FILE *fichier = fopen("exclusion.txt", "r");
    if (fichier == NULL) {
        printf("Erreur à l'ouverture du fichier\n");
        return -1;
    }

    int indexMax = 0;
    int src, dest;
    while (fscanf(fichier, "%d %d", &src, &dest) != EOF) {
        if (src > indexMax) indexMax = src;
        if (dest > indexMax) indexMax = dest;
    }

    struct Graphe* graphe = creerGraphe(indexMax + 1);
    fseek(fichier, 0, SEEK_SET);

    while (fscanf(fichier, "%d %d", &src, &dest) != EOF) {
        ajouterArete(graphe, src, dest);
    }

    colorierGrapheWelshPowell(graphe);

    fclose(fichier);
    return 0;
}
