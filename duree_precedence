#include <stdio.h>
#include <stdlib.h>

// Structure pour représenter un arc du graphe de précédence
typedef struct {
    int sommetdepart;
    int sommetarrivee;
} Arc;

// Structure pour représenter la durée d'une tâche
typedef struct {
    int numerosommet;
    double duree;
} Duree;

// Structure pour représenter une station avec des opérations
typedef struct {
    int *operations;
    int nombreOperations;
    double tempsCycleDisponible;
} StationAvecOperations;

// Fonction pour lire le fichier et construire le graphe
int readPrecedences(const char *precedence, Arc **graph, int *numEdges) {
    FILE *file = fopen(precedence, "r");
    if (file == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", precedence);
        return 0;
    }

    int sommetdepart, sommetarrivee;
    int maxarc = 10;  // Initialisation à une valeur raisonnable
    *graph = malloc(maxarc * sizeof(Arc));

    if (*graph == NULL) {
        fprintf(stderr, "Erreur lors de l'allocation de mémoire pour le graphe.\n");
        fclose(file);
        return 0;
    }

    *numEdges = 0;

    while (fscanf(file, "%d %d", &sommetdepart, &sommetarrivee) == 2) {
        if (*numEdges == maxarc) {
            // Agrandir le tableau si nécessaire
            maxarc *= 2;
            *graph = realloc(*graph, maxarc * sizeof(Arc));

            if (*graph == NULL) {
                fprintf(stderr, "Erreur lors de l'allocation de memoire pour le graphe.\n");
                fclose(file);
                return 0;
            }
        }

        (*graph)[*numEdges].sommetdepart = sommetdepart;
        (*graph)[*numEdges].sommetarrivee = sommetarrivee;
        (*numEdges)++;
    }

    fclose(file);
    return 1;
}

// Fonction pour afficher le graphe de précédence avec les durées associées
void printGraph(const Arc *graph, int numEdges, const Duree *sommets, int numSommets) {
    printf("Graphe de precedence :\n");
    for (int i = 0; i < numEdges; i++) {
        // Trouver la durée associée au sommet 'to'
        double dureeTo = -1.0;  // Valeur par défaut si le sommet n'est pas trouvé
        for (int j = 0; j < numSommets; j++) {
            if (graph[i].sommetarrivee == sommets[j].numerosommet) {
                dureeTo = sommets[j].duree;
                break;
            }
        }

        printf("%d -> %d, duree : %g\n", graph[i].sommetdepart, graph[i].sommetarrivee, dureeTo);
    }
}

// Fonction pour lire le temps de cycle maximal à partir du fichier
double readMaxCycleTime(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", filename);
        exit(1);
    }

    double maxCycleTime;
    if (fscanf(file, "%lf", &maxCycleTime) != 1) {
        fprintf(stderr, "Erreur lors de la lecture du temps de cycle maximal.\n");
        fclose(file);
        exit(1);
    }

    fclose(file);
    return maxCycleTime;
}

// Fonction pour attribuer les opérations aux stations
void attribuerOperationsAStations(StationAvecOperations *stations, int nombreStations, const Duree *sommets, int numSommets, const Arc *graph, int numEdges, double tempsCycleMax) {
    // Parcourir les opérations par ordre
    for (int i = 0; i < numSommets; i++) {
        int operation = sommets[i].numerosommet;
        double dureeOperation = sommets[i].duree;

        // Trouver la station avec le temps de cycle disponible le plus proche de la durée de l'opération
        int meilleureStation = -1;
        double tempsCycleMin = tempsCycleMax;

        for (int j = 0; j < nombreStations; j++) {
            if (stations[j].tempsCycleDisponible >= dureeOperation && stations[j].tempsCycleDisponible < tempsCycleMin) {
                meilleureStation = j;
                tempsCycleMin = stations[j].tempsCycleDisponible;
            }
        }

        // Si une station appropriée est trouvée, attribuer l'opération à la station
        if (meilleureStation != -1) {
            // Mettre à jour le temps de cycle de la station
            stations[meilleureStation].tempsCycleDisponible -= dureeOperation;

            // Ajouter l'opération à la liste des opérations de la station
            stations[meilleureStation].nombreOperations++;
            stations[meilleureStation].operations = realloc(stations[meilleureStation].operations, stations[meilleureStation].nombreOperations * sizeof(int));
            stations[meilleureStation].operations[stations[meilleureStation].nombreOperations - 1] = operation;
        } else {
            // Si aucune station appropriée n'est trouvée, ajouter une nouvelle station
            for (int j = 0; j < nombreStations; j++) {
                if (stations[j].tempsCycleDisponible == 0.0) {
                    // Réinitialiser le temps de cycle de la station
                    stations[j].tempsCycleDisponible = tempsCycleMax - dureeOperation;

                    // Ajouter l'opération à la liste des opérations de la station
                    stations[j].nombreOperations++;
                    stations[j].operations = realloc(stations[j].operations, stations[j].nombreOperations * sizeof(int));
                    stations[j].operations[stations[j].nombreOperations - 1] = operation;

                    break;
                }
            }
        }
    }
}

int main() {
    FILE *fichier = fopen("operations.txt", "r");
    if (fichier == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier.\n");
        return 1;
    }

    const char *filename = "precedences.txt";
    Arc *graph;
    int numeroarc;

    if (readPrecedences(filename, &graph, &numeroarc)) {
        Duree sommets[100]; // Supposons que vous ne dépasserez pas 100 sommets
        size_t i = 0;

        while (fscanf(fichier, "%d %lf", &sommets[i].numerosommet, &sommets[i].duree) == 2) {
            i++;
        }

        // Obtention du temps de cycle maximal à partir du fichier
        const char *cycleTimeFile = "temps_cycle.txt";
        double tempsCycleMax = readMaxCycleTime(cycleTimeFile);

        // Création et initialisation des stations
        int nombreStations = 2; // À ajuster en fonction de votre besoin
        StationAvecOperations *stations = malloc(nombreStations * sizeof(StationAvecOperations));

        for (int j = 0; j < nombreStations; j++) {
            stations[j].operations = NULL;
            stations[j].nombreOperations = 0;
            stations[j].tempsCycleDisponible = 0.0;
        }

        // Parcours du graphe pour attribuer les opérations aux stations
        attribuerOperationsAStations(stations, nombreStations, sommets, i, graph, numeroarc, tempsCycleMax);

        // Affichage des stations avec précédence et temps de cycle
        for (int j = 0; j < nombreStations; j++) {
            printf("Station %d:\n", j + 1);
            printf("Operations : ");
            for (int k = 0; k < stations[j].nombreOperations; k++) {
                printf("%d ", stations[j].operations[k]);
            }
            printf("\nTemps de cycle disponible : %f\n", stations[j].tempsCycleDisponible);
            printf("\n");
        }

        // Libération de la mémoire allouée pour le graphe et les stations
        free(graph);
        for (int j = 0; j < nombreStations; j++) {
            free(stations[j].operations);
        }
        free(stations);

        // Fermer le fichier
        fclose(fichier);

        return 0;
    }

    return 1;
}
