#include <stdio.h>
#include <stdlib.h>

// Structure pour représenter un arc du graphe de précédence
typedef struct {
    int from;
    int to;
} Edge;
//structure durée tache
typedef struct Sommet {
    int numero;
    double duree;
}duree;
// Fonction pour lire le fichier et construire le graphe
int readPrecedences(const char *filename, Edge **graph, int *numEdges) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", filename);
        return 0;
    }

    int from, to;
    int maxEdgeCount = 10;  // Initialisation arbitraire de la capacité du tableau
    *graph = malloc(maxEdgeCount * sizeof(Edge));
    *numEdges = 0;

    while (fscanf(file, "%d %d", &from, &to) == 2) {
        if (*numEdges == maxEdgeCount) {
            // Agrandir le tableau si nécessaire
            maxEdgeCount *= 2;
            *graph = realloc(*graph, maxEdgeCount * sizeof(Edge));
        }

        (*graph)[*numEdges].from = from;
        (*graph)[*numEdges].to = to;
        (*numEdges)++;
    }

    fclose(file);
    return 1;
}

// Fonction pour afficher le graphe de précédence
// Fonction pour afficher le graphe de précédence avec les durées associées
void printGraph(const Edge *graph, int numEdges, const duree *sommets, int numSommets) {
    printf("Graphe de précédence :\n");
    for (int i = 0; i < numEdges; i++) {
        // Trouver la durée associée au sommet 'to'
        double dureeTo = -1.0;  // Valeur par défaut si le sommet n'est pas trouvé
        for (int j = 0; j < numSommets; j++) {
            if (graph[i].to == sommets[j].numero) {
                dureeTo = sommets[j].duree;
                break;
            }
        }

        printf("%d -> %d, duree : %g\n", graph[i].from, graph[i].to, dureeTo);
    }
}

int main() {
    const char *filename = "precedences.txt";
    Edge *graph;
    int numEdges;
    FILE *fichier = fopen("operation.txt", "r");

    // Vérifier si le fichier est ouvert avec succès
    if (fichier == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier.\n");
        return 1; // Quitter le programme avec un code d'erreur
    }
    if (readPrecedences(filename, &graph, &numEdges)) {
        //printGraph(graph, numEdges, sommets, i);
        free(graph);  // Libérer la mémoire allouée pour le graphe
        struct Sommet sommets[100]; // Supposons que vous ne dépasserez pas 100 sommets
        size_t i = 0;

        while (fscanf(fichier, "%d %lf", &sommets[i].numero, &sommets[i].duree) == 2) {
            i++;
        }

        // Fermer le fichier après la lecture
        fclose(fichier);

        // Afficher le tableau
        printf("| Sommet | Duree |\n");
        printf("|--------|-------|\n");
        for (size_t j = 0; j < i; ++j) {
            printf("| %-6d | %-5.2f |\n", sommets[j].numero, sommets[j].duree);
        }
        printGraph(graph, numEdges, sommets, i);


        return 0;
    } else {
        return 1;  // Code d'erreur
    }
}


