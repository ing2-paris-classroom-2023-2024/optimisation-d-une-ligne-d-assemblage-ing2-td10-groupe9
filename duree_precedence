#include <stdio.h>
#include <stdlib.h>

// Structure pour représenter un arc du graphe de précédence
typedef struct {
    int sommetdepart;
    int sommetarrivee;
} Arc;

// Structure pour représenter la durée d'une tâche
typedef struct {
    int numerosommet;
    double duree;
} Duree;

// Fonction pour lire le fichier et construire le graphe
int readPrecedences(const char *precedence, Arc **graph, int *numEdges) {
    FILE *file = fopen(precedence, "r");
    if (file == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", precedence);
        return 0;
    }

    int sommetdepart, sommetarrivee;
    int maxarc = 10;  // Initialisation à une valeur raisonnable
    *graph = malloc(maxarc * sizeof(Arc));

    if (*graph == NULL) {
        fprintf(stderr, "Erreur lors de l'allocation de mémoire pour le graphe.\n");
        fclose(file);
        return 0;
    }

    *numEdges = 0;

    while (fscanf(file, "%d %d", &sommetdepart, &sommetarrivee) == 2) {
        if (*numEdges == maxarc) {
            // Agrandir le tableau si nécessaire
            maxarc *= 2;
            *graph = realloc(*graph, maxarc * sizeof(Arc));

            if (*graph == NULL) {
                fprintf(stderr, "Erreur lors de l'allocation de mémoire pour le graphe.\n");
                fclose(file);
                return 0;
            }
        }

        (*graph)[*numEdges].sommetdepart = sommetdepart;
        (*graph)[*numEdges].sommetarrivee = sommetarrivee;
        (*numEdges)++;
    }

    fclose(file);
    return 1;
}

// Fonction pour afficher le graphe de précédence avec les durées associées
void printGraph(const Arc *graph, int numEdges, const Duree *sommets, int numSommets) {
    printf("Graphe de précédence :\n");
    for (int i = 0; i < numEdges; i++) {
        // Trouver la durée associée au sommet 'to'
        double dureeTo = -1.0;  // Valeur par défaut si le sommet n'est pas trouvé
        for (int j = 0; j < numSommets; j++) {
            if (graph[i].sommetarrivee == sommets[j].numerosommet) {
                dureeTo = sommets[j].duree;
                break;
            }
        }

        printf("%d -> %d, durée : %g\n", graph[i].sommetdepart, graph[i].sommetarrivee, dureeTo);
    }
}

int main() {
    FILE *fichier = fopen("operations.txt", "r");
    if (fichier == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier.\n");
        return 1;
    }

    const char *filename = "precedences.txt";
    Arc *graph;
    int numeroarc;

    if (readPrecedences(filename, &graph, &numeroarc)) {
        Duree sommets[100]; // Supposons que vous ne dépasserez pas 100 sommets
        size_t i = 0;

        while (fscanf(fichier, "%d %lf", &sommets[i].numerosommet, &sommets[i].duree) == 2) {
            i++;
        }

        printGraph(graph, numeroarc, sommets, i);

        // Libérer la mémoire allouée pour le graphe
        free(graph);

        // Fermer le fichier
        fclose(fichier);

        return 0;
    }
}
