#include <stdio.h>
#include <stdlib.h>

// Structure pour représenter un arc du graphe de précédence
typedef struct {
    int from;
    int to;
} Edge;

// Fonction pour lire le fichier et construire le graphe
int readPrecedences(const char *filename, Edge **graph, int *numEdges) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", filename);
        return 0;
    }

    int from, to;
    int maxEdgeCount = 10;  // Initialisation arbitraire de la capacité du tableau
    *graph = malloc(maxEdgeCount * sizeof(Edge));
    *numEdges = 0;

    while (fscanf(file, "%d %d", &from, &to) == 2) {
        if (*numEdges == maxEdgeCount) {
            // Agrandir le tableau si nécessaire
            maxEdgeCount *= 2;
            *graph = realloc(*graph, maxEdgeCount * sizeof(Edge));
        }

        (*graph)[*numEdges].from = from;
        (*graph)[*numEdges].to = to;
        (*numEdges)++;
    }

    fclose(file);
    return 1;
}

// Fonction pour afficher le graphe de précédence
void printGraph(const Edge *graph, int numEdges) {
    printf("Graphe de précédence :\n");
    for (int i = 0; i < numEdges; i++) {
        printf("%d -> %d\n", graph[i].from, graph[i].to);
    }
}

int main() {
    const char *filename = "precedences.txt";
    Edge *graph;
    int numEdges;

    if (readPrecedences(filename, &graph, &numEdges)) {
        printGraph(graph, numEdges);
        free(graph);  // Libérer la mémoire allouée pour le graphe
        return 0;
    } else {
        return 1;  // Code d'erreur
    }
}
